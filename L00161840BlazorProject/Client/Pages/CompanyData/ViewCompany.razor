@page "/company"
@using System.Security.Claims
@inject ICompanyRepository companyRepository
@inject IPayGroupRepository payGroupRepository
@inject NavigationManager navigationManager
@inject IJSRuntime js
@attribute [Authorize]

<h3>Company Data</h3>

@if (Company != null)
{
    <CompanyForm Company="Company" DisableInput="IsRestricted" OnValidSubmit="Edit" />



    @if (PayGroups != null && !IsRestricted)
    {
        <div class="form-inline">
            <GenericList List="PayGroups">
                <WholeListTemplate>
                    <table class="table">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Pay Group</th>
                                <th>Period</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payGroup in PayGroups)
                            {
                                <tr>
                                    <td>
                                        <a href="/paygroups/edit/@payGroup.Id" class="btn btn-success">Edit</a>
                                    </td>
                                    <td>
                                        @payGroup.Name
                                    </td>
                                    <td>
                                        @payGroup.Period.ToString()
                                    </td>
                                    <td>

                                        <button class="btn btn-danger" @onclick="@(() => DeletePayGroup(payGroup.Id))">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </WholeListTemplate>
            </GenericList>
            <a href="/paygroups/add" class="btn btn-success">Add Paygroup</a>
        </div>


    }
}


@code {

    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }
    [CascadingParameter] Alert Alert { get; set; }

    Company Company;
    List<PayGroup> PayGroups;
    private bool IsRestricted = true;

    protected async override Task OnInitializedAsync()
    {
        //try
        //{
        //    throw new NullReferenceException();
        //}
        //catch (Exception ex)
        //{
        //    Alert.ShowError(ex.Message);
        //}
        var authState = await AuthenticationState;
        var role = authState.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value;
        if (role == "Admin")
            IsRestricted = false;
        Company = await companyRepository.GetCompany();
        if (Company != null)
        {
            PayGroups = await payGroupRepository.GetPayGroups();
        }
    }

    private async Task Edit()
    {
        await companyRepository.UpdateCompany(Company);
        await js.AlertMessage("Company updated!");
    }
    private async Task DeletePayGroup(int Id)
    {
        await payGroupRepository.DeletePayGroup(Id);
        PayGroups = await payGroupRepository.GetPayGroups();
    }
}
