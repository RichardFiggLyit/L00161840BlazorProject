@page "/users/edit/{userId}"
@inject IUsersRepository usersRepository
@inject IJSRuntime js
@attribute [Authorize(Roles = "Admin")]

<h3>Edit User</h3>
<form>
    <div>
        <label for="UserName">User Name</label>
        <input type="text" @bind="userName" name="UserName" id="UserName" />

    </div>
    <div>
        <label for="IsAdmin">Is Administrator?</label>
        <input type="checkbox" @bind="isAdmin" name="IsAdmin" id="IsAdmin" />

    </div>
    @if (employees != null)
    {
        <div>
            <label for="LinkedEmployee">Linked Employee</label>
            <select @bind="employeeId" name="LinkedEmployee" id="LinkedEmployee">
                <option value="0">-Please select an Employee-</option>
                @foreach (var employee in employees)
                {
                    <option value="@employee.EmployeeId">@employee.ToString()</option>
                }
            </select>
        </div>
    }
    <button class="btn btn-success" @onclick="UpdateUser">Update User</button>
</form>

@code {
    [Parameter] public string UserId { get; set; }
    private string userName;
    private string userNameDB;
    private bool isAdmin = false;
    private bool isAdminDB;
    private int employeeId = 0;
    private int employeeIdDB;
    private List<UserEmployeeDTO> employees = null;

    protected override async Task OnInitializedAsync()
    {
        isAdmin = await usersRepository.GetAdmin(UserId);
        isAdminDB = isAdmin;
        employeeId = await usersRepository.GetEmployeeId(UserId);
        employeeIdDB = employeeId;
        employees = await usersRepository.GetEmployees();
        var user = await usersRepository.GetUserName(UserId);
        userName = user.UserName;
        userNameDB = userName;
    }
    private async Task UpdateUser()
    {
        if (isAdmin!= isAdminDB)
        {
            SetAdminDTO setAdminDTO = new SetAdminDTO() { IsAdmin = isAdmin, UserId = UserId };
            await usersRepository.SetAdmin(setAdminDTO);
        }
        if (employeeId != employeeIdDB)
        {
            SetEmployeeDTO setEmployeeDTO = new SetEmployeeDTO() { UserId = UserId, EmployeeId = employeeId.ToString() };
            await usersRepository.SetEmployee(setEmployeeDTO);
        }
        if (userName != userNameDB)
        {
            UserNameDTO userNameDTO = new UserNameDTO() { UserId = UserId, UserName = userName };
            await usersRepository.SetUserName(userNameDTO);

        }

    }



}
