@inject IPayItemRepository payItemRepository
@if (DisplayConfirmation)
{
    <div class="modal-backdrop show"></div>

    <div class="modal fade show" id="exampleModal" tabindex="-1"
         role="dialog" aria-labelledby="exampleModalLabel"
         aria-hidden="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        Add Pay Item
                    </h5>
                    <button @onclick="onCancel" type="button" class="close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <PayItemForm OnValidSubmit="AddPayItem" PayItem="PayItem"></PayItemForm>
                </div>
                <div class="modal-footer">
                    <button @onclick="onCancel" type="button" class="btn btn-secondary">Cancel</button>
                    <button @onclick="onConfirm" type="button" class="btn btn-primary">Finished</button>

                </div>
            </div>
        </div>
    </div>
}


@code {
    public PayItem PayItem { get; set; } = new PayItem();
    private bool DisplayConfirmation = false;
    [Parameter] public EventCallback onConfirm { get; set; }
    [Parameter] public EventCallback onCancel { get; set; }
    public void Show() => DisplayConfirmation = true;
    public void Hide() => DisplayConfirmation = false;

    private async Task AddPayItem()
    {
        await payItemRepository.CreatePayItem(PayItem);

         PayItem = new PayItem();
    }


}
