@inject IPayItemRepository payItemRepository

@if (DisplayConfirmation)
{

    <div class="modal-backdrop show"></div>

    <div class="modal fade show" id="exampleModal" tabindex="-1"
         role="dialog" aria-labelledby="exampleModalLabel"
         aria-hidden="true" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        Edit Pay Item
                    </h5>
                    <button @onclick="onCancel" type="button" class="close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    @if (ItemId != 0)
                    {
                        <label>Item Type:</label>

                        <select @bind="ItemId">
                            @foreach (PayItem item in PayItems)
                            {
                                <option value="@item.Id">@item.ToString()</option>
                            }
                        </select>


                        <PayItemForm OnValidSubmit="EditPayItem" PayItem="PayItem"></PayItemForm>
                    }
                </div>

                <div class="modal-footer">
                    <button @onclick="onCancel" type="button" class="btn btn-secondary">Cancel</button>
                    <button @onclick="onConfirm" type="button" class="btn btn-primary">Finished</button>

                </div>
            </div>
        </div>
    </div>
}


@code {
    private int _ItemId = 0;
    public int ItemId
    {
        get
        {
            return _ItemId;
        }
        set
        {
            _ItemId = value;
            PayItem = PayItems.Where(x => x.Id == _ItemId).First();
        }
    }
    public PayItem PayItem { get; set; }
    public List<PayItem> PayItems;
    private bool DisplayConfirmation = false;
    [Parameter] public EventCallback onConfirm { get; set; }
    [Parameter] public EventCallback onCancel { get; set; }
    public void Show() => DisplayConfirmation = true;
    public void Hide() => DisplayConfirmation = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        PayItems = await payItemRepository.GetPayItems();
        ItemId = PayItems.FirstOrDefault().Id;
    }
    private async Task EditPayItem()
    {
        await payItemRepository.UpdatePayItem(PayItem);

    }


}
