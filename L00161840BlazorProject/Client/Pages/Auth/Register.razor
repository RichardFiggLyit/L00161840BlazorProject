@page "/register"

@inject IAccountsRepository accountsRepository
@inject NavigationManager navigationManager
@inject ILoginService loginService
@inject IInviteRepository inviteService
@inject NotificationService NotificationService


@using L00161840BlazorProject.Client.Auth

@if (invite != null)
{

    <RadzenTemplateForm TItem="UserInfo" Data=@userInfo Submit=@CreateUser>
        <RadzenFieldset Text="User Registration">
            <div class="row" style="margin-bottom: 48px">
                <div class="col-md-4 align-right">
                    <RadzenLabel Text="Username" />
                </div>
                <div class="col">
                    <RadzenTextBox style="display: block; width: 250px" Name="UserName" @bind-Value=@userInfo.UserName />
                    <RadzenRequiredValidator Component="UserName" Text="Enter Username" Style="position: absolute" />
                </div>
            </div>
            <div class="row" style="margin-bottom: 48px">
                <div class="col-md-4 align-right">
                    <RadzenLabel Text="Email Address" />
                </div>
                <div class="col">
                    <RadzenTextBox style="display: block; width: 250px" Name="Email" @bind-Value=@userInfo.Email />
                    <RadzenRequiredValidator Component="Email" Text="Enter Email address" Style="position: absolute" />
                </div>
            </div>
            <div class="row" style="margin-bottom: 48px">
                <div class="col-md-4 align-right">
                    <RadzenLabel Text="Password" />
                </div>
                <div class="col">
                    <RadzenPassword style="display: block; width: 250px" Name="Password" @bind-Value=@userInfo.Password />
                    <RadzenRequiredValidator Component="Password" Text="Enter password" Style="position: absolute" />
                </div>
            </div>
            <div class="row" style="margin-bottom: 48px">
                <div class="col-md-4">
                    <RadzenLabel Text="Repeat Password" />
                </div>
                <div class="col">
                    <RadzenPassword style="display: block; width: 250px" Name="RepeatPassword" @bind-Value=@userInfo.RepeatPassword />
                    <RadzenRequiredValidator Component="RepeatPassword" Text="Repeat your password" Style="position: absolute" />
                    <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(userInfo.RepeatPassword)) Value=@userInfo.Password Component="RepeatPassword" Text="Passwords should be the same" Style="position: absolute" />
                </div>
            </div>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Register"></RadzenButton>
        </RadzenFieldset>
    </RadzenTemplateForm>


}
else
{
    <h3>@pageMessage</h3>
}

@code {

    private UserInfo userInfo = new UserInfo();
    private Invite invite = null;
    private string pageMessage = "Validating...";
    protected override async Task OnInitializedAsync()
    {
        await loginService.Logout();
        try
        {
            var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("InviteReference", out var param))
            {
                string inviteReference = param.First();
                if (inviteReference != null)
                {
                    invite = await inviteService.GetInviteFromReference(inviteReference);
                    userInfo.Email = invite.Email;
                    userInfo.IsAdmin = invite.IsAdmin;
                    userInfo.EmployeeId = invite.EmployeeId;
                }
            }

        }
        catch
        {
            pageMessage = "Invite Reference is invalid! Please contact your administrator";
        }


    }


    private async Task CreateUser()
    {

        try
        {
            var userToken = await accountsRepository.Register(userInfo);

            invite.IsAccepted = true;
            await inviteService.UpdateInvite(invite);
            navigationManager.NavigateTo("login");
        }
        catch (Exception ex)
        {
            NotificationService.Notify(NotificationSeverity.Error, "Error", ex.Message);
        }

    }
}
