@page "/employee/overview"
@inject IEmployeeRepository employeeRepository
@inject IInviteRepository inviteRepository
@inject IEmailService emailService
@inject NavigationManager Navigator
@attribute [Authorize(Roles = "Admin")]


<h3>Employee Overview</h3>
<RadzenDataGrid ColumnWidth="150px" AllowFiltering="true" AllowPaging="true" PageSize="25" AllowSorting="true" Data="@Employees" TItem="EmployeeOverviewDTO">
    <Columns>
        <RadzenDataGridColumn TItem="EmployeeOverviewDTO" Filterable="false" Sortable="false">
            <Template Context="data">
                <a href="/employee/view/@data.Id" class="btn btn-success">Edit</a>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="EmployeeOverviewDTO" Property="PayrollReference" Title="Payroll Reference" />
        <RadzenDataGridColumn TItem="EmployeeOverviewDTO" Property="PPSN" Title="PPSN" />
        <RadzenDataGridColumn TItem="EmployeeOverviewDTO" Property="Forename" Title="Forename" />
        <RadzenDataGridColumn TItem="EmployeeOverviewDTO" Property="Surname" Title="Surname" />
        <RadzenDataGridColumn TItem="EmployeeOverviewDTO" Property="Email" Title="Email" />

        <RadzenDataGridColumn TItem="EmployeeOverviewDTO" Property="InviteStatus" Title="Invite Status" Filterable="false" Sortable="true">
            <Template Context="data">
                @data.InviteStatus.ToString().Replace("_", " ")
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="EmployeeOverviewDTO" Filterable="false" Sortable="false">
            <Template Context="data">
                @if (data.InviteStatus == InviteStatus.Not_Invited)
                {
                    <button class="btn btn-primary" @onclick="() => InviteEmployee(data)">Invite</button>
                }
            </Template>
        </RadzenDataGridColumn>


    </Columns>
</RadzenDataGrid>


@code {

    List<EmployeeOverviewDTO> Employees;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        Employees = await employeeRepository.GetEmployees();

    }
    private async Task InviteEmployee(EmployeeOverviewDTO employee)
    {
        Invite invite = new Invite()
        {
            Email = employee.Email,
            EmployeeId = employee.Id,
            IsAccepted = false,
            IsAdmin = false
        };
        var inviteDetails = await inviteRepository.CreateInvite(invite);
        var url = Navigator.BaseUri + "register?InviteReference=" + inviteDetails.InviteReference;
        await emailService.SendEmail("info@portal.com", employee.Email, "Invite to payroll portal", String.Format("<html><p>Hi {0},</p><br/><p>Please click below to complete your registration to our employer portal</p><a href=\"{1}\">{1}</a></html>", employee.Forename, url));
        await LoadEmployees();

    }
}
