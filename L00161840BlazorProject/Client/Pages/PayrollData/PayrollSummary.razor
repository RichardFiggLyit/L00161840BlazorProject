@page "/payroll/view/{PayPeriodId:int}"
@inject ICompanyRepository companyRepository


@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]
<h3>Payroll Summary<br /><br /></h3>
@if (@PayrollSummaryDTO != null)
{
<h4>Group: @PayrollSummaryDTO.PayGroupName</h4>
<h4>Frequency: @PayrollSummaryDTO.PayPeriod.ToString()</h4>
<h4>Pay Date: @PayrollSummaryDTO.PayDate.ToString("dd/MM/yyyy")</h4>
<h4>Tax Year: @PayrollSummaryDTO.TaxYear&nbsp;&nbsp;Tax Period: @PayrollSummaryDTO.TaxPeriod</h4>

<GenericList List="PayrollSummaryDTO.Rows">
    <WholeListTemplate>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Payroll Reference</th>
                    <th>Employee Name</th>
                    <th>PPSN</th>
                    <th>Gross</th>
                    <th>Basic Hours</th>
                    <th>Basic Rate</th>
                    @foreach (var item in PayrollSummaryDTO.Payments)
                    {
                        <th>@item.Name</th>
                    }
                    <th>PAYE</th>
                    <th>USC</th>
                    <th>EE PRSI</th>
                    <th>LPT</th>
                    @foreach (var item in PayrollSummaryDTO.Deductions)
                    {
                        <th>@item.Name</th>
                    }
                    <th>Net</th>
                    <th>ER PRSI</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in PayrollSummaryDTO.Rows)
                {
                    <tr>
                        <td>
                            <a href="/payroll/payslip/@record.PayDataId" class="btn btn-success">View Payslip</a>
                        </td>
                        <td>
                            @record.PayrollReference
                        </td>
                        <td>
                            @record.EmployeeName
                        </td>
                        <td>
                            @record.PPSN
                        </td>
                        <td>
                            @record.Gross.ToEuro()
                        </td>
                        <td>
                            @record.BasicHours.ToEuro()
                        </td>
                        <td>
                            @record.BasicRate.ToEuro()
                        </td>
                        @foreach (var item in PayrollSummaryDTO.Payments)
                        {

                            <td>@((record.PayslipItems.Where(x => x.PayItemId == item.Id).FirstOrDefault()?.Amount ?? 0.0).ToEuro())</td>
                        }
                        <td>@record.PAYE.ToEuro()</td>
                        <td>@record.USC.ToEuro()</td>
                        <td>@record.EEPRSI.ToEuro()</td>
                        <td>@record.LPT.ToEuro()</td>
                        @foreach (var item in PayrollSummaryDTO.Deductions)
                        {
                            <td>@((0.0-(record.PayslipItems.Where(x => x.PayItemId == item.Id).FirstOrDefault()?.Amount ?? 0.0)).ToEuro())</td>
                        }
                        <td>
                            @record.Net.ToEuro()
                        </td>
                        <td>
                            @record.ERPRSI.ToEuro()
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td>Totals</td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>@PayrollSummaryDTO.Rows.Sum(x => x.Gross).ToEuro()</td>
                    <td>@PayrollSummaryDTO.Rows.Sum(x => x.BasicHours).ToEuro()</td>
                    <td></td>
                    @foreach (var item in PayrollSummaryDTO.Payments)
                    {
                        <td>@((PayrollSummaryDTO.Rows.Sum(x=>x.PayslipItems.Where(y => y.PayItemId == item.Id).FirstOrDefault()?.Amount ?? 0.0)).ToEuro())</td>
                    }
                    <td>@PayrollSummaryDTO.Rows.Sum(x => x.PAYE).ToEuro()</td>
                    <td>@PayrollSummaryDTO.Rows.Sum(x => x.USC).ToEuro()</td>
                    <td>@PayrollSummaryDTO.Rows.Sum(x => x.EEPRSI).ToEuro()</td>
                    <td>@PayrollSummaryDTO.Rows.Sum(x => x.LPT).ToEuro()</td>
                    @foreach (var item in PayrollSummaryDTO.Deductions)
                    {
                        <td>@((0.0-(PayrollSummaryDTO.Rows.Sum(x=>x.PayslipItems.Where(y => y.PayItemId == item.Id).FirstOrDefault()?.Amount ?? 0.0))).ToEuro())</td>
                    }
                    <td>@PayrollSummaryDTO.Rows.Sum(x => x.Net).ToEuro()</td>
                    <td>@PayrollSummaryDTO.Rows.Sum(x => x.ERPRSI).ToEuro()</td>
                </tr>
            </tfoot>
        </table>
    </WholeListTemplate>
</GenericList>
}
@code {
    [Parameter] public int PayPeriodId { get; set; }
    PayrollSummaryDTO PayrollSummaryDTO;

    protected override async Task OnInitializedAsync()
    {
        PayrollSummaryDTO = await companyRepository.GetPayrollSummary(PayPeriodId);
    }

}
